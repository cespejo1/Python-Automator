#OM Interface Automation Tool v1.0 by Carlos Espejo and James Barett 6.9.2016
import ctypes
import os
import openpyxl
import re
import pyperclip
from tkinter import *
from ctypes import wintypes
import time
import win32gui
import win32con

#---------Begin Settings for Key Strokes---------#

user32 = ctypes.WinDLL('user32', use_last_error=True)

INPUT_MOUSE    = 0
INPUT_KEYBOARD = 1
INPUT_HARDWARE = 2

KEYEVENTF_EXTENDEDKEY = 0x0001
KEYEVENTF_KEYUP       = 0x0002
KEYEVENTF_UNICODE     = 0x0004
KEYEVENTF_SCANCODE    = 0x0008

MAPVK_VK_TO_VSC = 0

# msdn.microsoft.com/en-us/library/dd375731
VK_TAB  = 0x09
VK_MENU = 0x12

# C struct definitions

wintypes.ULONG_PTR = wintypes.WPARAM

class MOUSEINPUT(ctypes.Structure):
    _fields_ = (("dx",          wintypes.LONG),
                ("dy",          wintypes.LONG),
                ("mouseData",   wintypes.DWORD),
                ("dwFlags",     wintypes.DWORD),
                ("time",        wintypes.DWORD),
                ("dwExtraInfo", wintypes.ULONG_PTR))

class KEYBDINPUT(ctypes.Structure):
    _fields_ = (("wVk",         wintypes.WORD),
                ("wScan",       wintypes.WORD),
                ("dwFlags",     wintypes.DWORD),
                ("time",        wintypes.DWORD),
                ("dwExtraInfo", wintypes.ULONG_PTR))

    def __init__(self, *args, **kwds):
        super(KEYBDINPUT, self).__init__(*args, **kwds)
        # some programs use the scan code even if KEYEVENTF_SCANCODE
        # isn't set in dwFflags, so attempt to map the correct code.
        if not self.dwFlags & KEYEVENTF_UNICODE:
            self.wScan = user32.MapVirtualKeyExW(self.wVk,
                                                 MAPVK_VK_TO_VSC, 0)

class HARDWAREINPUT(ctypes.Structure):
    _fields_ = (("uMsg",    wintypes.DWORD),
                ("wParamL", wintypes.WORD),
                ("wParamH", wintypes.WORD))

class INPUT(ctypes.Structure):
    class _INPUT(ctypes.Union):
        _fields_ = (("ki", KEYBDINPUT),
                    ("mi", MOUSEINPUT),
                    ("hi", HARDWAREINPUT))
    _anonymous_ = ("_input",)
    _fields_ = (("type",   wintypes.DWORD),
                ("_input", _INPUT))

LPINPUT = ctypes.POINTER(INPUT)

def _check_count(result, func, args):
    if result == 0:
        raise ctypes.WinError(ctypes.get_last_error())
    return args

user32.SendInput.errcheck = _check_count
user32.SendInput.argtypes = (wintypes.UINT, # nInputs
                             LPINPUT,       # pInputs
                             ctypes.c_int)  # cbSize

# Functions

def PressKey(hexKeyCode):
    x = INPUT(type=INPUT_KEYBOARD,
              ki=KEYBDINPUT(wVk=hexKeyCode))
    user32.SendInput(1, ctypes.byref(x), ctypes.sizeof(x))

def ReleaseKey(hexKeyCode):
    x = INPUT(type=INPUT_KEYBOARD,
              ki=KEYBDINPUT(wVk=hexKeyCode,
                            dwFlags=KEYEVENTF_KEYUP))
    user32.SendInput(1, ctypes.byref(x), ctypes.sizeof(x))

#---------End Settings for Key Strokes---------#

#---------Begin Filename Getter---------#
def askopenfilename():
    filename = filedialog.askopenfilename()

    if filename:
        global fileLocation
        fileLocation = filename
#---------End Filename Getter---------#

#---------Begin Paste Order Lines---------#
def pasteOrderLines(item, qty):
    pyperclip.copy(item)
    
    PressKey(0x11) #Ctrl
    PressKey(0x56) #V
    ReleaseKey(0x11)
    ReleaseKey(0x56)
    PressKey(VK_TAB)
    ReleaseKey(VK_TAB)
    time.sleep(0.5)
    
    pyperclip.copy(qty)
    
    PressKey(0x11) #Ctrl
    PressKey(0x56) #V
    ReleaseKey(0x11)
    ReleaseKey(0x56)
    time.sleep(0.5)

    PressKey(0x28) #Down
    ReleaseKey(0x28)

    time.sleep(0.5)
    
    #PressKey(0x11) #Ctrl
    #PressKey(0x53) #S
    #ReleaseKey(0x11)
    #ReleaseKey(0x53)

#---------End Paste Order Lines---------#

os.chdir("/Users/"+os.getlogin()+"/Desktop")

root=Tk()

EnumWindows = ctypes.windll.user32.EnumWindows
EnumWindowsProc = ctypes.WINFUNCTYPE(ctypes.c_bool, ctypes.POINTER(ctypes.c_int), ctypes.POINTER(ctypes.c_int))
GetWindowText = ctypes.windll.user32.GetWindowTextW
GetWindowTextLength = ctypes.windll.user32.GetWindowTextLengthW
IsWindowVisible = ctypes.windll.user32.IsWindowVisible
titles = []

partNumRegex = re.compile(r'\d\d\d\d\d\d-\d\d\d')

variable = StringVar(root)
variable.set("Window Choices") # default value
def foreach_window(hwnd, lParam):
                if IsWindowVisible(hwnd):
                    length = GetWindowTextLength(hwnd)  
                    buff = ctypes.create_unicode_buffer(length + 1)
                    if GetWindowText(hwnd, buff, length + 1) != 0 :
                        titles.append(buff.value)
                return True
                
                wb=openpyxl.load_workbook('Book1.xlsx')
                sheet=wb.get_sheet_by_name('Sheet1')
                return sheet['A1'].value

def importEventOnClick():
    wb=openpyxl.load_workbook(fileLocation)
    sheet=wb.get_sheet_by_name('Sheet1')
    global lastRow
    lastRow = sheet.max_row
    global lastColumn
    lastColumn = sheet.max_column
    global array
    array=[[0 for c in range(lastColumn)] for r in range(lastRow)]
    for r in range(1, lastRow+1, 1):
        for c in range(1, lastColumn+1, 1):
            if c == 1 :
                if partNumRegex.search(sheet.cell(row=r,column=c).value) is None:
                    allow=messagebox.askquestion("Warning",sheet.cell(row=r,column=c).value+" is not a valid part number. \nWould you like to allow this part number anyway?", icon="warning")
                                                
                    if allow == "no":
                            sheet.cell(row=r,column=lastColumn+1).value = "Not Allowed"
                            wb.save('Book1.xlsx')
                            break
                    elif allow== "yes":
                            array[r-1][c-1]=str(sheet.cell(row=r,column=c).value)
                            sheet.cell(row=r,column=lastColumn+1).value = "Allowed"
                            wb.save('Book1.xlsx')
                                                        
                else:
                    array[r-1][c-1]=str(sheet.cell(row=r,column=c).value)
                                                
            else:
                array[r-1][c-1]=str(sheet.cell(row=r,column=c).value)

    pyperclip.copy(str(array[0][0]))

#Paste code has code to bring a window (in this case notepadd) to front and maximize page
def windowEnumerationHandler(hwnd, top_windows):
    top_windows.append((hwnd, win32gui.GetWindowText(hwnd)))

def pasteEventOnClick():
    print ("paste")
    if __name__ == "__main__":
        results = []
        top_windows = []
        win32gui.EnumWindows(windowEnumerationHandler, top_windows)
    for i in top_windows:
        if "ebsprd" in i[1].lower():
            print (i)
            win32gui.SetForegroundWindow(i[0])
            win32gui.ShowWindow(i[0], 5)
            win32gui.ShowWindow(i[0], win32con.SW_MAXIMIZE)
            time.sleep(0.25)
            for r in range(0, lastRow, 1):
                pasteOrderLines(array[r][0],array[r][1])
            
def quitEventOnClick():
    os._exit(1)    

def ok():
    print ("value is", variable.get())
    root.quit()

root.title("Python Oracle Order Automator v1.0")
button_opt = {'fill': BOTH, 'padx': 5, 'pady': 5}

Label(root, text="Created by James Barett and Carlos Espejo", background="white", foreground="black").pack(**button_opt)
Button(root,text="Select File",command=askopenfilename).pack(**button_opt)
Button(root,text="Import",command=importEventOnClick).pack(**button_opt)
Button(root,text="Paste",command=pasteEventOnClick).pack(**button_opt)
Button(root,text="OK",command=ok).pack(**button_opt)
w = OptionMenu(root, variable, "one", "two", "three").pack(**button_opt)
Button(root,text="Quit",command=quitEventOnClick).pack(**button_opt)

root.configure(background="white")
root.geometry("350x300")
root.mainloop()
